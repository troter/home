#!/usr/bin/env ruby

require 'fileutils'
require 'open3'
require 'pathname'
require 'shellwords'
require 'tmpdir'

# port of https://github.com/mooz/percol/blob/v0.2.1/tools/zsh/percol.zsh
class PecoPopup
  class << self
    def peco_path
      ENV["PECO_BIN"] || "peco"
    end

    def tmux_path
      ENV["TMUX_BIN"] || "tmux"
    end

    def run(argv, stdin, stdout, use_tmux=false)
      self.new(argv, stdin, stdout, use_tmux).run
    end
  end

  private attr_reader :argv, :stdin, :stdout, :use_tmux

  def initialize(argv, stdin, stdout, use_tmux)
    @argv = argv
    @stdin = stdin
    @stdout = stdout
    @use_tmux = use_tmux
  end

  def run
    if use_tmux
      peco_tmux
    else
      peco_simple
    end
  end

  def peco_tmux
    WithTmux.new(argv, stdin, stdout).run
  end

  def peco_simple
    Simple.new(argv, stdin, stdout).run
  end

  class WithTmux
    private attr_reader :argv, :stdin, :stdout

    def initialize(argv, stdin, stdout)
      @argv = argv
      @stdin = stdin
      @stdout = stdout
    end

    def run
      create_fifo
      t = Thread.new do
        system([
          PecoPopup.tmux_path,
          'split-window',
          "#{PecoPopup.peco_path} #{argv.map(&:shellescape).join(' ')} < #{fifo_in_path} > #{fifo_out_path}"
        ].shelljoin)
      end
      Thread.new do
        fifo_in_path.open('w') do |fifo_in|
          IO.copy_stream(stdin, fifo_in)
          # ignore broken pipe
        end
      end
      t.join
      stdout.write(fifo_out_path.read)
    end

    def tmpdir
      @tmpdir ||= Dir.mktmpdir.tap do
        at_exit { FileUtils.remove_entry_secure(tmpdir) }
      end
    end

    def fifo_in_path
      Pathname("#{tmpdir}/peco-channel-in")
    end

    def fifo_out_path
      Pathname("#{tmpdir}/peco-channel-out")
    end

    def create_fifo
      [File.mkfifo(fifo_in_path, 0o600), File.mkfifo(fifo_out_path, 0o600)]
    end
  end

  class Simple
    private attr_reader :argv, :stdin, :stdout

    def initialize(argv, stdin, stdout)
      @argv = argv
      @stdin = stdin
      @stdout = stdout
    end

    def run
      IO.popen([PecoPopup.peco_path, *argv].shelljoin, 'r+') do |io|
        IO.copy_stream(stdin, io)
        io.close_write
        stdout.write(io.read)
      end
    end
  end
end

if __FILE__ == $0
  PecoPopup.run(ARGV, $stdin, $stdout, ENV["TMUX"] && ENV["PECO_USE_TMUX"])
end
